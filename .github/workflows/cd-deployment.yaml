name: CD - Deploy to EC2

on:
  push:
    branches:
      - dev
      - rc
      - master
    paths:
      - "payoneer/**"
  workflow_dispatch:

jobs:
  tag-release:
    runs-on: ubuntu-latest

    defaults:
      run:
        working-directory: payoneer

    outputs:
      tag: ${{ steps.tag_version.outputs.tag }}
      deploy_env: ${{ steps.set_env.outputs.deploy_env }}
      deploy_port: ${{ steps.set_env.outputs.deploy_port }}

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set Environment Variables
        id: set_env
        run: |
          BRANCH="${GITHUB_REF#refs/heads/}"
          if [[ "$BRANCH" == "dev" ]]; then
            echo "deploy_env=dev" >> $GITHUB_ENV
            echo "deploy_port=8081" >> $GITHUB_ENV
          elif [[ "$BRANCH" == "rc" ]]; then
            echo "deploy_env=rc" >> $GITHUB_ENV
            echo "deploy_port=8082" >> $GITHUB_ENV
          else
            echo "deploy_env=prod" >> $GITHUB_ENV
            echo "deploy_port=80" >> $GITHUB_ENV
          fi
          echo "deploy_env=${{ env.deploy_env }}" >> $GITHUB_OUTPUT
          echo "deploy_port=${{ env.deploy_port }}" >> $GITHUB_OUTPUT
      
      - name: Get Current Version
        id: version
        run: echo "VERSION=$(jq -r .version package.json)" >> $GITHUB_ENV

      - name: Determine Tag Prefix
        run: |
          if [[ "${{ github.ref_name }}" == "dev" ]]; then
            echo "TAG_PREFIX=dev-" >> $GITHUB_ENV
          elif [[ "${{ github.ref_name }}" == "rc" ]]; then
            echo "TAG_PREFIX=rc-" >> $GITHUB_ENV
          else
            echo "TAG_PREFIX=" >> $GITHUB_ENV
          fi

      - name: Create and Push Tag
        id: tag_version
        run: |
          TAG="${{ env.TAG_PREFIX }}${{ env.VERSION }}-${{ github.run_number }}"
          echo "New Tag: $TAG"
          git config --global user.name "github-actions"
          git config --global user.email "github-actions@github.com"
          git tag $TAG
          git push origin $TAG
          echo "TAG=$TAG" >> $GITHUB_ENV
          echo "tag=$TAG" >> $GITHUB_OUTPUT

  deploy:
    runs-on: ubuntu-latest

    defaults:
      run:
        working-directory: payoneer

    needs: tag-release
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      - name: Set Environment Variables
        run: |
          if [[ "${{ github.ref_name }}" == "dev" ]]; then
            echo "APP_PORT=8081" >> $GITHUB_ENV
          elif [[ "${{ github.ref_name }}" == "rc" ]]; then
            echo "APP_PORT=8082" >> $GITHUB_ENV
          else
            echo "APP_PORT=8080" >> $GITHUB_ENV
          fi
          echo "IMAGE_TAG=$(echo ${{ github.ref_name }} | tr '/' '-')" >> $GITHUB_ENV

      # - name: Build and Push Docker Image
      #   run: |
      #     echo "Using tag: ${{ needs.tag-release.outputs.tag }}"
      #     docker build -t ${{ secrets.DOCKER_HUB_USERNAME }}/payoneer-app:${{ needs.tag-release.outputs.tag }} .
      #     docker push ${{ secrets.DOCKER_HUB_USERNAME }}/payoneer-app:${{ needs.tag-release.outputs.tag }}

      - name: Build and push Docker image
        run: |
          echo "Using tag: ${{ needs.tag-release.outputs.tag }}"
          docker build --build-arg APP_PORT=${{ env.APP_PORT }} -t ${{ secrets.DOCKER_HUB_USERNAME }}/payoneer-app:${{ env.IMAGE_TAG }} .
          docker push ${{ secrets.DOCKER_HUB_USERNAME }}/payoneer-app:${{ env.IMAGE_TAG }}


      - name: Set up SSH Key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.EC2_HOST }} >> ~/.ssh/known_hosts

      - name: Set up Python 3.8
        uses: actions/setup-python@v4
        with:
          python-version: '3.8'

      - name: Upgrade pip for Python 3.8
        run: |
          python -m ensurepip --default-pip
          python -m pip install --upgrade pip setuptools wheel

      - name: Install Ansible 2.9.27
        run: |
          python -m pip install 'ansible==2.9.27'

      - name: Run Ansible Playbook for Deployment
        run: |
          ansible-playbook -i "${{ secrets.EC2_HOST }}," ../.infra/ansible/deployment.yml \
            --extra-vars "docker_image_tag=${{ needs.tag-release.outputs.tag }}" \
            --extra-vars "ec2_host_name=${{ secrets.EC2_HOST }}" \
            --extra-vars "docker_hub_username=${{ secrets.DOCKER_HUB_USERNAME }}" \
            --extra-vars "ansible_python_interpreter=/usr/bin/python2.7" \
            --extra-vars "deploy_env=${{ needs.tag-release.outputs.deploy_env }}" \
            --user ${{ secrets.EC2_USER }} \
            --private-key ~/.ssh/id_rsa
#      if ansible run failed we can create rollback process
#      instead of rollback process we can use blue-green deployemnt with load balancer
